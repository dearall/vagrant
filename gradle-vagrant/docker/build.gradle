buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy:3.0.9'
    }
}

plugins {
    id 'com.manning.gia.vagrant-plugin'
    id 'com.manning.gia.ssh-plugin'
    id 'groovy'
}

group = 'com.sansovo.gradle-vagrant'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}


// web war 文件的 group, name 属性读取，命令行使用 -Pwar= 获取要部署的 web war 文件 GA 属性(manning,sansovo 之一)
def propGA = project.hasProperty('war') ? project.getProperty('war') : 'manning'
logger.quiet "Loading configuration for warGA '$propGA'."

def webWarFile = file("$rootDir/config/webWarArtifact.groovy")
def parsedWarGA = new ConfigSlurper(propGA).parse(webWarFile.toURI().toURL())

// 环境部署环境属性读取，命令行使用 -Penv= 设置环境值(develop, test, uat, production, docker 之一)
def env = 'docker'
logger.quiet "Loading configuration for environment '$env'."

def configFile = file("$rootDir/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURI().toURL())

ext {
    warGA = parsedWarGA
    config = parsedConfig
}

apply from: '../gradle/buildlogic/downloadWar.gradle'

ext {
    warFile = configurations.warFileFetching.singleFile
}

ssh {
    sourceFile.set(warFile)

    def remote = "${config.server.username}@${config.server.hostname}:/tmp"
    println 'remote: ' + remote
    remoteTempDir.set(remote)

    host.set(config.server.hostname)
    port.set(config.server.sshPort)
    username.set(config.server.username)
    vagrantKeyFile.set(file("$rootDir/config/ssh_private_key/docker_private_key"))
}

copyWarToServer.dependsOn(fetchWebWar)

// 以 ssh 命令方式停止 tomcat
shutdownTomcat {
    dependsOn(copyWarToServer)
    //command.set("${config.tomcat.catalina_home}/bin/catalina.sh stop")
    command.set("echo 'shutting down tomcat'")
}

deleteTomcatWebappsDir {
    dependsOn(shutdownTomcat)
    command.set("rm -rf ${config.tomcat.catalina_base}/webapps/${config.tomcat.context}")
}

deleteTomcatWorkDir {
    dependsOn(shutdownTomcat)
    command.set("rm -rf ${config.tomcat.catalina_base}/work/Catalina/localhost/${config.tomcat.context}")
}

copyWarToWebappsDir {
    command.set("cp -f /tmp/${warFile.name} ${config.tomcat.catalina_base}/webapps/${config.tomcat.context}.war")
}

// 以 ssh 命令方式启动 tomcat
startupTomcat {
    //command.set("exec ${config.tomcat.catalina_home}/bin/catalina.sh run")
    command.set("echo 'startting up tomcat'")
}

// 部署任务链
deployWar {
    dependsOn(startupTomcat)
    doFirst {
        logger.quiet "Deploying WAR file to $config.server.hostname via SSH at port $config.server.sshPort."
        logger.quiet "download url: ${config.binaryRepository.releaseUrl}"

        logger.quiet "warGA.group: ${warGA.group}"
        logger.quiet "warGA.name: ${warGA.name}"
    }
}

//冒烟测试
apply from: '../gradle/buildlogic/smokeTest.gradle'
//远程功能测试
apply from: '../gradle/buildlogic/functionalTest.gradle'
