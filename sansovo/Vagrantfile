# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "devalone-ubuntu-20.04-server-x64"

  config.vm.define "tomcat", primary: true do |tomcat|
    tomcat.vm.network "public_network", ip: "192.168.0.21", hostname: true
    tomcat.vm.hostname = "tomcat.sansovo.org"
    # tomcat.vm.provision :puppet do |puppet|
    #    puppet.manifests_path = "manifests"
    #    puppet.manifest_file = "tomcat.pp"
    #  end
    tomcat.vm.provider "virtualbox" do |vb|
      vb.name = "tomcat"
      vb.memory = "2048"
    end
  end
  config.vm.define "web" do |web|
    #   web.vm.box = "ubuntu-20.04-server"
    web.vm.network "public_network", ip: "192.168.0.22", hostname: true
    web.vm.hostname = "web.sansovo.org"
  end
  config.vm.define "db", autostart: false do |db|
    #   db.vm.box = "ubuntu-20.04-server"
    db.vm.network "public_network", ip: "192.168.0.23", hostname: true
    db.vm.hostname = "db.sansovo.org"
  end
  config.vm.define "test" do |test|
    test.vm.network "public_network", type: "dhcp"
    test.vm.hostname = "test.sansovo.org"
  end
  config.vm.define "ruby" do |ruby|
    ruby.vm.network "public_network", type: "dhcp"
    ruby.vm.hostname = "ruby.sansovo.org"

    ruby.vm.provider "virtualbox" do |vb|
      vb.name = "ruby"
    end
  end
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    vb.memory = "1024"
    vb.cpus = 2
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  $script = <<-SCRIPT
  echo I am provisioning...
  date > /etc/vagrant_provisioned_at
  SCRIPT

  # config.vm.provision "shell", inline: $script

  config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
      echo "Hello World!"
  SHELL

  config.vm.provision "shell" do |s|
    s.inline = "echo $1"
    s.args = "'hello, vagrant!'"
  end
  config.vm.provision "shell" do |s|
    s.inline = "echo $1 $2"
    s.args = ["hello, world!", "hello vagrant!"]
  end
end
