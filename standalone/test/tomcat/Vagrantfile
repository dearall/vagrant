# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "devalone/ubuntu-20.04-server-x64-puppet"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  config.vm.network "public_network", ip: "192.168.0.31", hostname: true
  config.vm.hostname = "tomcat-test.sansovo.org"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    #   # name this virtual machine
    vb.name = "tomcat-standalone-test"
    #
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # shell set puppet server config, 只手动执行，避免重复执行私钥不匹配:
  #
  # vagrant provision --provision-with set-puppet-server
  #
  config.vm.provision "set-puppet-server", type: "shell", run: "never", privileged: true do |s|
    s.inline = $set_puppet_server
  end

  # vagrant file provision
  config.vm.provision "file", source: "../../files", destination: "/tmp/"

  # shell bootstrap
  config.vm.provision "bootstrap", type: "shell", privileged: true do |s|
    s.inline = $bootstrap
  end

  # shell seperator
  config.vm.provision "seperator1", type: "shell", privileged: true do |s|
    s.inline = $seperator1
  end

  # shell seperator
  config.vm.provision "seperator2", type: "shell", privileged: true do |s|
    s.inline = $seperator2
  end

  # puppet apply environment
  config.vm.provision "puppet" do |puppet|
    # apply module_path
    puppet.module_path = ["../../../puppet/puppet-modules"]

    # apply environment
    puppet.environment_path = "../../../puppet/environments"
    puppet.environment = "test"

    puppet.options = "--test --verbose"
  end

  # shell JAVA_HOME
  config.vm.provision "java_home", type: "shell", privileged: true do |s|
    s.inline = $java_home
  end

  # shell seperator
  config.vm.provision "seperator3", type: "shell", privileged: true do |s|
    s.inline = $seperator3
  end

  # puppet apply tomcat9 and start tomcat service
  # always run:
  #
  #   vagrant up
  #   vagrant reload
  #   vagrant provision
  #   vagrant provision --provision-with start-tomcat
  #
  # shell set tomcat9_base dir
  # config.vm.provision "tomcat9_base_dir", type: "shell", privileged: true do |s|
  #   s.inline = $tomcat9_base_dir
  # end

  # shell set tomcat_users_xml
  config.vm.provision "tomcat_users_xml", type: "shell", privileged: true do |s|
    s.inline = $tomcat_users_xml
  end

  # shell h2_schema_files
  config.vm.provision "h2_schema_files", type: "shell", privileged: true do |s|
    s.inline = $h2_schema_files
  end

  # always run tomcat
  config.vm.provision "start-tomcat", type: "puppet", run: "always" do |puppet|
    # apply module_path
    puppet.module_path = ["../../../puppet/puppet-modules"]

    # apply mainifest_file
    puppet.manifests_path = "../../../puppet/puppet-apply/tomcat/manifests"
    puppet.manifest_file = "tomcat9_same_start.pp"

    # environment
    puppet.environment = "test"

    puppet.options = "--test"
  end

  # puppet apply stop tomcat9
  # never run
  #
  # do the following command to execute this provision:
  #
  #   vagrant provision --provision-with stop-tomcat
  #
  #
  config.vm.provision "stop-tomcat", type: "puppet", run: "never" do |puppet|
    # apply module_path
    puppet.module_path = ["../../../puppet/puppet-modules"]

    # apply mainifest_file
    puppet.manifests_path = "../../../puppet/puppet-apply/tomcat/manifests"
    puppet.manifest_file = "tomcat9_same_stop.pp"

    # environment
    puppet.environment = "test"

    puppet.options = "--test"
  end

  # shell end
  config.vm.provision "end", type: "shell", privileged: true do |s|
    s.inline = $end
  end
end

# inline shell scripts
$bootstrap = <<-SCRIPT
source /etc/profile.d/puppet-agent.sh
systemctl stop puppet.service
puppet config set server puppetserver.sansovo.org --section main
apt-get update
SCRIPT

# apt-get install --only-upgrade puppet-agent

# shell tomcat9_base dir
$tomcat9_base_dir = <<-SCRIPT
mkdir -p /opt/tomcat9_base/logs
mkdir -p /opt/tomcat9_base/temp
cp -rfp /opt/tomcat9/conf /opt/tomcat9_base/
cp -rfp /opt/tomcat9/webapps /opt/tomcat9_base/
cp -rfp /opt/tomcat9/work /opt/tomcat9_base/
chown -R tomcat:tomcat /opt/tomcat9_base
SCRIPT

# set tomcat config file
$tomcat_users_xml = <<-SCRIPT
cp -f /tmp/files/tomcat-users.xml /opt/tomcat9/conf/tomcat-users.xml
cp -f /tmp/files/context.xml /opt/tomcat9/webapps/manager/META-INF/context.xml
chown tomcat:tomcat /opt/tomcat9/conf/tomcat-users.xml
chown tomcat:tomcat /opt/tomcat9/webapps/manager/META-INF/context.xml
SCRIPT

$h2_schema_files = <<-SCRIPT
mkdir /home/tomcat/h2
cp -f /tmp/files/h2-2.1.210.jar   /home/tomcat/h2/h2-2.1.210.jar
cp -f /tmp/files/todo-schema.sql  /home/tomcat/h2/todo-schema.sql
chown tomcat:tomcat /home/tomcat/h2/h2-2.1.210.jar
chown tomcat:tomcat /home/tomcat/h2/todo-schema.sql
SCRIPT

# set puppet server shell script
$set_puppet_server = <<-SCRIPT
puppet config set server puppetserver.sansovo.org --section main
puppet ssl bootstrap
SCRIPT

$seperator1 = <<-SCRIPT
echo 'seperator: puppet resolved module complete.'
SCRIPT

$seperator2 = <<-SCRIPT
echo 'seperator: puppet apply ntp module complete.'
SCRIPT

$seperator3 = <<-SCRIPT
echo 'seperator: puppet apply adoptjdk11 module complete.'
SCRIPT

$java_home = <<-SCRIPT
source /etc/profile
SCRIPT

$seperator4 = <<-SCRIPT
echo 'seperator: source /etc/profile complete.'
SCRIPT

$end = <<-SCRIPT
apt-get clean
echo 'vagrant provision finished.'
SCRIPT
